name: Deploy RAG Slack Lambda

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Pre-cleanup: Delete SSM parameters if they already exist
        run: |
          PARAMS=("openai_api_key" "pinecone_api_key" "pinecone_index_host" "slack_bot_token")

          for param in "${PARAMS[@]}"; do
            echo "Checking for $param..."
            aws ssm get-parameter --name "$param" >/dev/null 2>&1

            if [ $? -eq 0 ]; then
              echo "Deleting existing parameter: $param"
              aws ssm delete-parameter --name "$param"
            else
              echo "No existing parameter found for $param"
            fi
          done
          
      - name: Package Lambda function
        run: |
          # Install dependencies
          pip install -r requirements.txt -t .
          
          # Create zip file
          zip -r rag.zip . -x "*.git*" "*.github*" "template.yaml" "README.md"

      - name: Upload to S3
        run: |
          aws s3 cp rag.zip s3://nikhilragdata/lambda/rag.zip

      - name: Deploy CloudFormation stack
        run: |
          aws cloudformation deploy \
            --template-file template.yaml \
            --stack-name rag-slack-chatbot \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides \
              OpenAIApiKey="${{ secrets.OPENAI_API_KEY }}" \
              PineconeApiKey="${{ secrets.PINECONE_API_KEY }}" \
              PineconeIndexHost="${{ secrets.PINECONE_INDEX_HOST }}" \
              SlackBotToken="${{ secrets.SLACK_BOT_TOKEN }}" \
            --no-fail-on-empty-changeset

      - name: Get API Gateway URL
        run: |
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name rag-slack-chatbot \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiGatewayUrl`].OutputValue' \
            --output text)

          echo "API Gateway URL: $API_URL"
          echo "API_URL=$API_URL" >> $GITHUB_ENV
          echo "::notice title=Deployed API::$API_URL"

          