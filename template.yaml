AWSTemplateFormatVersion: '2010-09-09'
Description: 'RAG Chatbot Lambda with existing IAM role'


Resources:
  # Lambda Function
  RAGLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: rag-slack-lambda
      Runtime: python3.11
      Handler: query_rag_lambda.lambda_handler
      Role: arn:aws:iam::783764612303:role/Insta_lambda_handler
      Timeout: 120
      MemorySize: 512
      Code:
        S3Bucket: nikhilragdata             
        S3Key: lambda/rag.zip 


  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: RAG

  ApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: chat

  ApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RAGLambda.Arn}/invocations'

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: prod

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref RAGLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'

Outputs:
  ApiGatewayUrl:
    Description: 'API Gateway URL for Slack'
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/chat'
  
  LambdaFunctionName:
    Description: 'Lambda Function Name'
    Value: !Ref RAGLambda